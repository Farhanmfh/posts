{
  "_from": "Validator",
  "_id": "Validator@1.0.8",
  "_inBundle": false,
  "_integrity": "sha512-ulkbBmf9m22C3l3oisUFX3ryEVAYDc4Il0lRCmx2ENniV1zOuSkIsuW5h3Sj1yDnoXKAM8A2f2hp5pSUWSbf7Q==",
  "_location": "/Validator",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "Validator",
    "fetchSpec": "latest",
    "name": "Validator",
    "raw": "Validator",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/Validator/-/Validator-1.0.8.tgz",
  "_shasum": "c795a5f5b1f3dff63e5dfe64b50ff07f419b10d3",
  "_spec": "Validator",
  "_where": "/home/farhan/first-app/posts/backend/models",
  "author": {
    "email": "rati.wannapanop@gmail.com",
    "name": "Rati Wannapanop"
  },
  "bugs": {
    "url": "https://github.com/jfstn/Validator/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A client-side JavaScript validation package, based on Laravel 5.2 validation.",
  "devDependencies": {
    "@babel/core": "^7.3.4",
    "@babel/preset-env": "^7.3.4",
    "@babel/register": "^7.0.0",
    "chai": "^4.2.0",
    "coveralls": "^3.0.3",
    "mocha": "^6.0.2",
    "nyc": "^13.3.0",
    "rimraf": "^2.6.3",
    "rollup": "^1.6.0",
    "rollup-plugin-babel": "^4.3.2",
    "rollup-plugin-commonjs": "^9.2.1",
    "rollup-plugin-node-resolve": "^4.0.1",
    "rollup-plugin-uglify": "^6.0.2",
    "rollup-watch": "^4.3.1"
  },
  "homepage": "https://github.com/jfstn/Validator#readme",
  "keywords": [
    "javascript",
    "laravel",
    "validator"
  ],
  "license": "MIT",
  "main": "dist/Validator.js",
  "name": "Validator",
  "optionalDependencies": {},
  "readme": "# Validator\n\n[![npm](https://img.shields.io/npm/v/Validator.svg)](https://www.npmjs.com/package/Validator)\n[![Travis build](https://img.shields.io/travis/jfstn/Validator.svg)](https://travis-ci.org/jfstn/Validator)\n[![Coverage Status](https://coveralls.io/repos/github/jfstn/Validator/badge.svg?branch=master)](https://coveralls.io/github/jfstn/Validator?branch=master)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjfstn%2FValidator.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fjfstn%2FValidator?ref=badge_shield)\n\nA client-side JavaScript validation package, based on Laravel 5.2 validation.\n\n## Installation\n\n1.  Included as global `<script>`, copy the `Validator.js` file inside `dist` directory to your project directory\n    and reference it in the script tag. Or, you can use NPMCDN to reference it like so,\n\n    ```html\n    <head>\n        <script src=\"public/js/Validator.js\"></script>\n        <!-- or using NPMCDN -->\n        <script src=\"https://unpkg.com/Validator\"></script>\n    </head>\n    ```\n\n2.  Using NPM\n    ```bash\n    npm install Validator --save\n    ```\n    ```javascript\n    const Validator = require('Validator');\n    ```\n\n## Usage\n\n-   Basic usage\n\n    ```javascript\n    const data = {\n        name: 'John Doe',\n        company: 'Example Co.',\n        birthday: '1985-04-16'\n    };\n\n    const rules = {\n        name: 'required',\n        // for multiple rules\n        birthday: 'required|date', // can be a piped string\n        company: ['required', 'string'] // can be an array of strings\n    };\n\n    const v = Validator.make(data, rules);\n\n    if (v.fails()) {\n        const errors = v.getErrors();\n        console.log(errors);\n    }\n    ```\n\n    `getErrors()` will return an object containing error field as a key and array of error messages for that field.\n\n-   Custom Error Messages\n\n    ```javascript\n    const messages = {\n        // custom message for based rules\n        required: 'You forgot the :attr field',\n        email: ':attr is not valid',\n        // custom message for specific rule of attribute\n        'receiver.email': 'The receiver email address is not valid'\n    };\n\n    const v = Validator.make(data, rules, messages);\n\n    if (v.passes()) {\n        //...\n    }\n    ```\n\n-   Custom Name\n\n    ```javascript\n    const v = Validator.make(data, rules, messages, { email: 'Email Address' });\n    ```\n\n## Supported Validation Rules\n\nSee validation rule usage in [Laravel Documentation](https://laravel.com/docs/5.2/validation#available-validation-rules)\n\n-   accepted\n-   after (date)\n-   alpha\n-   alpha_num\n-   alpha_dash\n-   array\n-   before (date)\n-   between\n-   boolean\n-   confirmed\n-   date\n-   different\n-   digits\n-   digits_between\n-   email\n-   filled\n-   in\n-   integer\n-   ip\n-   json\n-   max\n-   min\n-   not_in\n-   numeric\n-   present\n-   regex\n-   required\n-   required_if\n-   required_unless\n-   required_with\n-   required_with_all\n-   required_without\n-   required_without_all\n-   same\n-   size\n-   string\n-   url\n\n## Extending with Custom Validation Rules\n\nThe validator can be extended with custom rules\n\n```javascript\nconst rules = {\n    id: 'required|mongoid'\n};\n\nfunction validateMongoId(name, value, params) {\n    let hexadecimal = /^[0-9A-F]+$/i;\n    return value && hexadecimal.test(value) && value.length === 24;\n}\n\nconst v = Validator.make(data, rules);\nv.extend('mongoid', validateMongoId, ':attr is not a valid mongo id');\n\nif (v.passes()) {\n    //...\n}\n```\n\n`validator.extend` takes three _required_ parameters:\n\n-   `name`: the name of the custom rule\n-   `callback`: called when the rule is checked\n-   `validationMessage`: error message text on validation failure\n\nThe validation callback receives three parameters:\n\n1. `name`: the field name being validated\n2. `value`: the given value in the data\n3. `params`: Any parameters, passed after the colon in the rule definition.\n\nParams defined ike so: `rulename:min=10,max=15` would be passed in as an array: `['min=10', 'max=15']`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jfstn/Validator.git"
  },
  "scripts": {
    "build": "rollup -c",
    "coverage": "npm test && nyc report --reporter=text-lcov | coveralls",
    "prebuild": "rimraf dist",
    "prepublishOnly": "npm run build && npm run test",
    "test": "nyc --check-coverage --lines 85 mocha --require @babel/register",
    "watch": "rollup -c -w"
  },
  "version": "1.0.8"
}
